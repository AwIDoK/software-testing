name: client tests with postgres and backend
on: push

jobs:
  # Label of the container job
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:15-alpine3.10

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todo_managertest
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          -t
          -i

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL client, populates
        # the client with data, and retrieves data
        run: npm install pg && node script.js
        working-directory: ./database
        # Environment variable used by the `client.js` script to create a new PostgreSQL client.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: postgres
          # The default PostgreSQL port
          POSTGRES_PORT: 5432

      - name: Start frontend
        run: |
          npm install
          npm start &
        working-directory: client
        
      - name: Start backend
        run: |
          npm install
          npm start &
        working-directory: server-js
        env:
          DATABASE: postgres://postgres:postgres@postgres:5432/todo_managertest
      
      - name: Run cypress tests
        run: npm run test-cypress
        working-directory: client

      - name: Run tests
        run: npm test
        working-directory: client

